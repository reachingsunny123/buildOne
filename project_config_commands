https://sananda.signin.aws.amazon.com/console
login:Root Account:Sananda,Account:anirban,Password:Sunny0707#

RDB settings:
DB instance identifier: mydbinstance
Master username: root
Password: password
Database Name:learn2gether
Database port:3306

Installing JDK
----------------------
yum install java-sdk-1.8.0
which java
sudo nano /etc/environment {add the line given below }
JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-0.b14.36.amzn1.x86_64/"


Maven installation
---------------------------------------------
sudo wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo
sudo sed -i s/\$releasever/6/g /etc/yum.repos.d/epel-apache-maven.repo
sudo yum install -y apache-maven
mvn --version


Node configurations and installations in server EC2:
------------------------------------------------------
https://hackernoon.com/tutorial-creating-and-managing-a-node-js-server-on-aws-part-1-d67367ac5171

curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash
nvm ls
source ~/.bashrc
nvm install 8.9 (nvm use 8.9 -> to use the version)
node --version
npm install -g @angular/cli@latest
npm install @angular/cli@latest -------> inside project
npm install --------------> inside the Angular project root folder (this will install all the node_modules)
npm install --save express body-parser (may not be required)
ng build --prod
node server.js > stdout.txt 2> stderr.txt &


Router installation
-----------------------------------------------------
sudo yum install httpd
cd /etc/httpd/conf
vi httpd.conf

<VirtualHost *:80>
	ServerName learn2gether.co.in
	ProxyRequests Off
	ProxyPreserveHost On
	AllowEncodedSlashes NoDecode
	ProxyPass / http://localhost:3000/ nocanon
	ProxyPassReverse / http://localhost:3000
	ProxyPassReverse / http://learn2gether.co.in
	<Proxy http://loclhost:3000/* >
	 Order deny,allow
	 Allow from all
	</Proxy>
</VirtualHost>	

sudo service httpd start

	
java -Dspring.application.json='{"database-name": "rds_demo","db-instance-identifier": "rds-demo","rdsPassword": "rds-sample-db","accessKey": "XXXXXXXXXXXXXXXX","secretKey": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"}' -jar target/spring-boot-aws-0.1.0.jar



http://www.briansjavablog.com/2016/05/spring-boot-angular-amazon-web-services.html
http://javasampleapproach.com/spring-framework/spring-cloud/amazon-s3-uploaddownload-files-springboot-amazon-s3-application
http://www.briansjavablog.com/2015/11/micro-services-introduction_11.html

http://javaonfly.blogspot.in/2018/03/file-upload-angular4-microservice.html?utm_source=dlvr.it&utm_medium=facebook


